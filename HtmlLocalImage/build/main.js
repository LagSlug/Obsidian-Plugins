/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/is-url/index.js
var require_is_url = __commonJS({
  "node_modules/is-url/index.js"(exports, module2) {
    module2.exports = isUrl2;
    var protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
    var localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
    var nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
    function isUrl2(string) {
      if (typeof string !== "string") {
        return false;
      }
      var match = string.match(protocolAndDomainRE);
      if (!match) {
        return false;
      }
      var everythingAfterProtocol = match[1];
      if (!everythingAfterProtocol) {
        return false;
      }
      if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
        return true;
      }
      return false;
    }
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HtmlLocalSrcPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_is_url = __toESM(require_is_url());
var import_path = __toESM(require("path"));
var import_view = require("@codemirror/view");
function getUriPrefix(uri) {
  const index = uri.indexOf("//");
  if (!index)
    return "";
  return uri.substring(0, index + 2);
}
var HtmlLocalSrcPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEditorExtension(this.getEditorViewPlugin());
    this.registerMarkdownPostProcessor((content) => this.modifyImages(content));
  }
  modifyImages(content) {
    const directoryPath = this.getActiveDirectoryPath(), rootPath = this.getVaultRootPath(), images = this.getImages(content);
    if (!directoryPath || !images.length)
      return;
    images.forEach((img) => {
      const src = img.getAttr("src");
      if (!src) {
        return;
      }
      if ((0, import_is_url.default)(src))
        return;
      if (import_path.default.isAbsolute(src)) {
        const prefix = getUriPrefix(rootPath);
        const pathBody = rootPath.substring(prefix.length);
        img.srcset = prefix + import_path.default.join(pathBody, src);
      } else {
        const prefix = getUriPrefix(directoryPath);
        const pathBody = directoryPath.substring(prefix.length);
        img.srcset = prefix + import_path.default.join(pathBody, src);
      }
    });
  }
  /** returns the active file */
  getActiveFile() {
    return this.app.workspace.getActiveFile();
  }
  /** returns the directory path of the currently active file */
  getActiveDirectoryPath() {
    const activeFile = this.getActiveFile();
    if (!activeFile)
      return null;
    const resourcePath = this.app.vault.getResourcePath(activeFile);
    return resourcePath.substring(0, resourcePath.lastIndexOf("/"));
  }
  getVaultRootPath() {
    const root = this.app.vault.getRoot();
    const rootPath = root.vault.adapter.getResourcePath("");
    return rootPath.substring(0, rootPath.lastIndexOf("?"));
  }
  getImages(element) {
    return Array.from(element.getElementsByTagName("img"));
  }
  getEditorViewPlugin() {
    const plugin = this;
    return import_view.ViewPlugin.fromClass(
      class EditorViewPlugin {
        constructor() {
          this.debouncedUpdate = (0, import_obsidian.debounce)((content) => plugin.modifyImages(content));
        }
        update(update) {
          this.debouncedUpdate(update.view.contentDOM);
        }
      }
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
